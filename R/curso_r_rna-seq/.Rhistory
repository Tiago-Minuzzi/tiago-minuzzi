testeT <- apply(table_exp_numeric, 1, function(x) t.test(x[1:3],x[4:6])$p.value )
FoldChange <-  apply(table_exp_numeric, 1, function(x) mean(x[4:6])/mean(x[1:3]) )
#calcular correlacao e p value entre dois genes
correlation <- cor.test(table_exp_numeric[1,], table_exp_numeric[4,])
correlation$estimate
correlation$p.value
table_exp_numeric[1,]
plot(table_exp_numeric[1,], table_exp_numeric[4,], pch=16, cex=2, xlab=rownames(table_exp_numeric)[1], ylab=rownames(table_exp_numeric)[4] )
plot(table_exp_numeric[1,],
table_exp_numeric[4,],
pch=16,
cex=2,
xlab=rownames(table_exp_numeric)[1],
ylab=rownames(table_exp_numeric)[4] )
abline(lm( table_exp_numeric[4,] ~ table_exp_numeric[1,] ), col = "red", lwd=2)
plot(table_exp_numeric[1,],
table_exp_numeric[4,],
pch=16,
cex=2,
xlab=rownames(table_exp_numeric)[1],
ylab=rownames(table_exp_numeric)[4] )
abline(lm( table_exp_numeric[4,] ~ table_exp_numeric[1,] ), col = "red", lwd=2)
plot(table_exp_numeric[1,],
table_exp_numeric[4,],
pch=16,
cex=2,
xlab=rownames(table_exp_numeric)[1],
ylab=rownames(table_exp_numeric)[4] )
abline(lm( table_exp_numeric[4,] ~ table_exp_numeric[1,] ), col = "red", lwd=2)
text(1000, max(table_exp_numeric[4,]) ,paste("p.value =", round(correlation$p.value,3)) )
text(600, max(table_exp_numeric[4,])-300 ,paste("R =", round(correlation$estimate,3)) )
plot(table_exp_numeric[1,],
table_exp_numeric[4,],
pch=16,
cex=2,
xlab=rownames(table_exp_numeric)[1],
ylab=rownames(table_exp_numeric)[4] )
abline(lm( table_exp_numeric[4,] ~ table_exp_numeric[1,] ), col = "red", lwd=2)
text(1000, max(table_exp_numeric[4,]) ,paste("p.value =", round(correlation$p.value,3)) )
text(600, max(table_exp_numeric[4,])-300 ,paste("R =", round(correlation$estimate,3)) )
plot(table_exp_numeric[1,],
table_exp_numeric[4,],
pch=16,
cex=2,
xlab=rownames(table_exp_numeric)[1],
ylab=rownames(table_exp_numeric)[4] )
abline(lm( table_exp_numeric[4,] ~ table_exp_numeric[1,] ), col = "red", lwd=2)
text(2000, max(table_exp_numeric[4,]) ,paste("p.value =", round(correlation$p.value,3)) )
text(600, max(table_exp_numeric[4,])-300 ,paste("R =", round(correlation$estimate,3)) )
text(600, max(table_exp_numeric[4,]) ,paste("p.value =", round(correlation$p.value,3)) )
plot(table_exp_numeric[1,],
table_exp_numeric[4,],
pch=16,
cex=2,
xlab=rownames(table_exp_numeric)[1],
ylab=rownames(table_exp_numeric)[4] )
abline(lm( table_exp_numeric[4,] ~ table_exp_numeric[1,] ), col = "red", lwd=2)
text(600, max(table_exp_numeric[4,]) ,paste("p.value =", round(correlation$p.value,3)) )
text(600, max(table_exp_numeric[4,])-300 ,paste("R =", round(correlation$estimate,3)) )
plot(table_exp_numeric[1,],
table_exp_numeric[4,],
pch=16,
cex=2,
xlab=rownames(table_exp_numeric)[1],
ylab=rownames(table_exp_numeric)[4] )
abline(lm( table_exp_numeric[4,] ~ table_exp_numeric[1,] ), col = "red", lwd=2)
text(1000, max(table_exp_numeric[4,]) ,paste("p.value =", round(correlation$p.value,3)) )
text(600, max(table_exp_numeric[4,])-300 ,paste("R =", round(correlation$estimate,3)) )
png("correlation.png",res=500, width = 2000, height = 2000, type = c("cairo"))
png("correlation.png",res=500, width = 2000, height = 2000, type = c("cairo"))
plot(table_exp_numeric[1,],
table_exp_numeric[4,],
pch=16,
cex=2,
xlab=rownames(table_exp_numeric)[1],
ylab=rownames(table_exp_numeric)[4] )
abline(lm( table_exp_numeric[4,] ~ table_exp_numeric[1,] ), col = "red", lwd=2)
text(1000, max(table_exp_numeric[4,]) ,paste("p.value =", round(correlation$p.value,3)) )
text(600, max(table_exp_numeric[4,])-300 ,paste("R =", round(correlation$estimate,3)) )
png("correlation.png",res=500, width = 2000, height = 2000, type = c("cairo"))
plot(table_exp_numeric[1,],
table_exp_numeric[4,],
pch=16,
cex=2,
xlab=rownames(table_exp_numeric)[1],
ylab=rownames(table_exp_numeric)[4] )
abline(lm( table_exp_numeric[4,] ~ table_exp_numeric[1,] ), col = "red", lwd=2)
text(1000, max(table_exp_numeric[4,]) ,paste("p.value =", round(correlation$p.value,3)) )
text(600, max(table_exp_numeric[4,])-300 ,paste("R =", round(correlation$estimate,3)) )
dev.off()
if (testeT[1] >= 0.05){
print("maior")
} else {
print("menor")
}
#Utilizando for  - for (cond) { exc }
mydata <- vector()
for (posicao in 1:length(FoldChange) ) {
if (FoldChange[posicao] > 10) {
mydata[posicao] <- "up"
} else {
mydata[posicao] <- "down"
}
}
my_fun <- function(valor) {
if (valor >= 0.05){
print("Maior")
} else {
print("Menor")
}
}
FoldChange
names(FoldChange)
FoldChange[:]
FoldChange[]
values(FoldChange)
apply(FoldChange,1,my_fun(x))
apply(FoldChange,1,my_fun())
apply(FoldChange,1,my_fun(FoldChange))
apply(FoldChange,1,my_fun)
class(FoldChange)
mode(FoldChange)
typeof(FoldChange)
str(FoldChange)
FoldChange
apply(FoldChange,1,function(x) my_fun(x))
apply(FoldChange,2,function(x) my_fun(x))
vetor <-  c(0.2,0.3,0.6,0.7)
apply(vetor,1,my_fun)
apply(vetor,1, function(x) my_fun(x))
vetor <-  c(0.2,0.3,0.6,0.7)
lapply(vetor,1, function(x) my_fun(x))
lapply(vetor,my_fun)
my_fun <- function(valor) {
if (valor >= 0.05){
print("Maior")
} else {
print("Menor")
}
}
vetor <-  c(0.2,0.3,0.6,0.7)
lapply(vetor,my_fun)
my_fun <- function(valor) {
if (valor >= 0.5){
print("Maior")
} else {
print("Menor")
}
}
vetor <-  c(0.2,0.3,0.6,0.7)
lapply(vetor,my_fun)
sapply(vetor,my_fun)
apply(vetor,my_fun)
apply(vetor,FUN=my_fun)
apply(vetor,1:2,FUN=my_fun)
apply(vetor,2,FUN=my_fun)
vapply(vetor,my_fun)
vetor <-  c(0.2,0.3,0.6,0.7)
vapply(vetor,my_fun)
my_fun <- function(valor) {
if (valor >= 0.5){
print("Maior")
} else {
print("Menor")
}
}
vetor <-  c(0.2,0.3,0.6,0.7)
vapply(vetor,my_fun)
lapply(vetor,my_fun)
sapply(vetor,my_fun)
sapply(vetor,my_fun)[0]
resultado <-  sapply(vetor,my_fun)
resultado
resultado <- lapply(vetor,my_fun)
resultado
# Criando uma matriz
meu_vetor <- c(1,2,3,4,5,6,7,8,9)
my_fun <- function(valor) {
if (valor <= 5) {
print("Ok, é menor")
} else {
print("Vish, é maior")
}
}
res <- sapply(meu_vetor, my_fun)
res
my_fun <- function(valor) {
if (valor < 5) {
print("Ok, é menor")
} else if (valor = 5){
print("É o próprio")
} else {
print("Vish, é maior")
}
}
res <- sapply(meu_vetor, my_fun)
res
# Criando uma matriz
meu_vetor <- c(1,2,3,4,5,6,7,8,9)
my_fun <- function(valor) {
if (valor < 5) {
print("Ok, é menor")
} else if (valor = 5) {
print("É o próprio")
} else {
print("Vish, é maior")
}
}
my_fun <- function(valor) {
if (valor < 5) {
print("Ok, é menor")
} else if (valor = 5) {
print("É o próprio")
} else
print("Vish, é maior")
}
my_fun <- function(valor) {
if (valor < 5) {
print("Ok, é menor")
} else if (valor = 5) {
print("É o próprio")
} else {
print("Vish, é maior")
}
}
my_fun <- function(valor) {
if (valor < 5) {print("Ok, é menor")}
else if (valor = 5) {print("É o próprio")}
else {print("Vish, é maior")}
}
my_fun <- function(valor) {
if (valor < 5) {
print("Ok, é menor")
} else if (valor == 5) {
print("É o próprio")
} else {
print("Vish, é maior")
}
}
res <- sapply(meu_vetor, my_fun)
res
res <- lapply(meu_vetor, my_fun)
res
s
res <- sapply(meu_vetor, my_fun)
res
my_fun <- function(valor) {
if (valor < 5) {
print(valor,"Ok, é menor")
} else if (valor == 5) {
print("É o próprio")
} else {
print("Vish, é maior")
}
}
res <- sapply(meu_vetor, my_fun)
my_fun <- function(valor) {
if (valor < 5) {
print("Ok, é menor")
} else if (valor == 5) {
print("É o próprio")
} else {
print("Vish, é maior")
}
}
res <- sapply(meu_vetor, my_fun)
res
my_fun <- function(valor) {
if (valor < 5) {
print(paste0(valor,"Ok, é menor"))
} else if (valor == 5) {
print("É o próprio")
} else {
print(paste0(valor,"Vish, é maior"))
}
}
res <- sapply(meu_vetor, my_fun)
# Criando uma matriz
meu_vetor <- c(1,2,3,4,5,6,7,8,9)
res <- sapply(meu_vetor, my_fun)
my_fun <- function(valor) {
if (valor < 5) {
print(paste0(valor," Ok, é menor"))
} else if (valor == 5) {
print("É o próprio")
} else {
print(paste0(valor,"Vish, é maior"))
}
}
res <- sapply(meu_vetor, my_fun)
res
my_fun <- function(valor) {
if (valor < 5) {
print(paste0(valor," Ok, é menor"))
} else if (valor == 5) {
print("É o próprio")
} else {
print(paste0(valor," Vish, é maior"))
}
}
res <- sapply(meu_vetor, my_fun)
res
my_fun <- function(valor) {
if (valor < 5) {
print(paste0(valor," Ok, é menor"))
} else if (valor == 5) {
print("É o próprio")
} else {
sprintf("Vish, %s é menor",valor)
}
}
res <- sapply(meu_vetor, my_fun)
my_fun <- function(valor) {
if (valor < 5) {
print(paste0(valor," Ok, é menor"))
} else if (valor == 5) {
print("É o próprio")
} else {
print(paste0(valor," Vish, é maior"))
}
}
res <- sapply(meu_vetor, my_fun)
my_fun <- function(valor) {
if (valor < 5) {
print(paste0(valor," Ok, é menor"))
} else if (valor == 5) {
print("É o próprio")
} else {
sprintf("O %s é maior",valor)
}
}
res <- sapply(meu_vetor, my_fun)
res
my_fun <- function(valor) {
if (valor < 5) {
sprintf("O %s é menor que 5.",valor)
} else if (valor == 5) {
print("É o próprio.")
} else {
sprintf("O %s é maior que 5.",valor)
}
}
res <- sapply(meu_vetor, my_fun)
res
library("airway")
library("gplots")
library("GenomicFeatures")
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
library("ggplot2")
library("genefilter")
data("airway")
se <- airway
se
head(assay(se), 3)
?assay
se
rowRanges(se)
str(metadata(rowRanges(se)))
colData(se)
se$cell
se$dex
se$dex <- relevel(se$dex, "untrt")
se$dex
## Inicio expessao diferencial
countdata <- assay(se)
head(countdata, 3)
coldata <- colData(se)
airway
?airway
data.frame(se)
countdata
coldata
#Colocar count table em formato deseq2
ddsMat <- DESeqDataSetFromMatrix(countData = countdata, colData = coldata, design = ~ cell + dex )
nrow(ddsMat)
#Remover genes com baixissima expressao
dds <- ddsMat[  rowSums(counts(ddsMat))> 5, ]
View(ddsMat)
View(matrixGenes)
View(dds)
View(ddsMat)
View(dds)
View(ddsMat)
ddsMat$cell
ddsMat@design
ddsMat$dex
counts(ddsMat)
#Remover genes com baixissima expressao
dds <- ddsMat[  rowSums(counts(ddsMat))> 5, ]
nrow(dds)
#Normalizacao
dds <- DESeq(dds)
#Expressao diferencial
res <- results(dds, alpha=.05, lfcThreshold=1)
mcols(res, use.names=TRUE)
summary(res)
#Expressao diferencial com o contraste referente ao tipo celular
results(dds, contrast=c("cell", "N061011", "N61311"))
table(res$padj < .05)
#selecao genes com valor de p-ajustado < 0.01
resSig <- subset(res, padj < 0.01)
resSig[ order(resSig$log2FoldChange, decreasing=TRUE), ]
write.csv(res, "DEGs_untr_trt.csv")
## Transformacao rlog. Os valores de expressao muito baixos sao reduzidas em relacao as medias dos genes para todas as amostras
rld <- rlog(dds, blind=FALSE)
head(assay(rld), 3)
## Heatmap genes diferencialmente expressos
breaks <- seq(-10.5,10, by=0.01) #criar sequencia de valores a cada 0.01
mycol <- colorpanel(n=length(breaks)-1,low="blue",mid="white",high="red") #criar sequencia de cores dados os valores criadaos
mat <- assay(rld)[ rownames(resSig), ]
df <- as.data.frame(colData(rld)[,c("cell","dex")])
jpeg("heatmap_DEGs.jpeg", width = 6, height = 6, units = 'in', res = 500, pointsize = 12)
pheatmap(mat, annotation_col=df, scale="row", clustering_distance_rows="correlation", show_rownames=F, color=mycol)
dev.off()
#fazer volcano plot
#volcano plot
values <- cbind(res[,2],res[,6])
up <- values[values[,1]> 1 & values[,2]<0.05, ]
down <- values[values[,1]< -1 & values[,2]<0.05, ]
png("my_volcano.png")
plot( values[,1], -log10(values[,2]), xlab="log2(foldchange)",ylab="-log10(q-value)",col="black",pch=16,cex=1.5, xlim=c(-8,8),main="Case vs. Control" )
if (length(up)>1){
points(up[,1], -log10(up[,2]),pch=16,cex=1.5,col="dark red")
}
if (length(down)>1){
points(down[,1], -log10(down[,2]),pch=16,cex=1.5,col="dark green")
}
abline(h=-log10(0.05),col="black",lty=2)
abline(v=log2(2), col="black",lty=2)
abline(v=-log2(2), col="black",lty=2)
dev.off()
#descobrir quais sao os 20 genes mais variaveis
topVarGenes <- head(order(rowVars(assay(rld)),decreasing=TRUE),20)
topVarGenes
assay(rld)[topVarGenes,]
library("airway")
library("gplots")
library("GenomicFeatures")
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
library("ggplot2")
library("genefilter")
data("airway")
se <- airway
se
head(assay(se), 3)
colSums(assay(se)) #somar reads quantificadas por amostra
rowRanges(se)
str(metadata(rowRanges(se)))
colData(se)
se$cell
se$dex
se$dex <- relevel(se$dex, "untrt")
se$dex
## Inicio expessao diferencial
countdata <- assay(se)
head(countdata, 3)
coldata <- colData(se)
#Colocar count table em formato deseq2
ddsMat <- DESeqDataSetFromMatrix(countData = countdata, colData = coldata, design = ~ cell + dex )
nrow(ddsMat)
#Remover genes com baixissima expressao
dds <- ddsMat[  rowSums(counts(ddsMat))> 5, ]
nrow(dds)
#Normalizacao
dds <- DESeq(dds)
#Expressao diferencial
res <- results(dds, alpha=.05, lfcThreshold=1)
mcols(res, use.names=TRUE)
summary(res)
#Expressao diferencial com o contraste referente ao tipo celular
results(dds, contrast=c("cell", "N061011", "N61311"))
table(res$padj < .05)
#selecao genes com valor de p-ajustado < 0.01
resSig <- subset(res, padj < 0.01)
resSig[ order(resSig$log2FoldChange, decreasing=TRUE), ]
write.csv(res, "DEGs_untr_trt.csv")
## Transformacao rlog. Os valores de expressao muito baixos sao reduzidas em relacao as medias dos genes para todas as amostras
rld <- rlog(dds, blind=FALSE)
head(assay(rld), 3)
## Heatmap genes diferencialmente expressos
breaks <- seq(-10.5,10, by=0.01) #criar sequencia de valores a cada 0.01
mycol <- colorpanel(n=length(breaks)-1,low="blue",mid="white",high="red") #criar sequencia de cores dados os valores criadaos
mat <- assay(rld)[ rownames(resSig), ]
df <- as.data.frame(colData(rld)[,c("cell","dex")])
jpeg("heatmap_DEGs.jpeg", width = 6, height = 6, units = 'in', res = 500, pointsize = 12)
pheatmap(mat, annotation_col=df, scale="row", clustering_distance_rows="correlation", show_rownames=F, color=mycol)
dev.off()
#fazer volcano plot
#volcano plot
values <- cbind(res[,2],res[,6])
up <- values[values[,1]> 1 & values[,2]<0.05, ]
down <- values[values[,1]< -1 & values[,2]<0.05, ]
png("my_volcano.png")
plot( values[,1], -log10(values[,2]), xlab="log2(foldchange)",ylab="-log10(q-value)",col="black",pch=16,cex=1.5, xlim=c(-8,8),main="Case vs. Control" )
if (length(up)>1){
points(up[,1], -log10(up[,2]),pch=16,cex=1.5,col="dark red")
}
if (length(down)>1){
points(down[,1], -log10(down[,2]),pch=16,cex=1.5,col="dark green")
}
abline(h=-log10(0.05),col="black",lty=2)
abline(v=log2(2), col="black",lty=2)
abline(v=-log2(2), col="black",lty=2)
dev.off()
#descobrir quais sao os 20 genes mais variaveis
topVarGenes <- head(order(rowVars(assay(rld)),decreasing=TRUE),20)
topVarGenes
assay(rld)[topVarGenes,]
